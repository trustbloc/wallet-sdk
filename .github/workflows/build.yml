#
# Copyright Avast Software. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

name: "wallet-sdk ci"

env:
  GO_VERSION: '1.21'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  SemanticPullRequest:
    name: Semantic Pull Request Check
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v4
        with:
          requireScope: true
          scopes: |
            sdk
            app
            deps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Checks:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run checks
        run: |
          echo $PATH
          go env
          echo ${{ github.workspace }}
          make checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  UnitTest:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run unit test
        run: make unit-test
      - name: Upload coverage to Codecov
        run: |
          bash <(curl https://codecov.io/bash)
        env:
          CODECOV_UPLOAD_TOKEN: ${{ secrets.CODECOV_UPLOAD_TOKEN }}

  SDKIntegrationTest:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run Integration tests
        run: |
          echo '127.0.0.1 file-server.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 did-resolver.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 vc-rest-echo.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 api-gateway.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 cognito-mock.trustbloc.local' | sudo tee -a /etc/hosts
          make integration-test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  iOSFlutterIntegrationTest:
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Generate and copy iOS Binding
        run: |
          echo $PATH
          echo ${{ github.workspace }}
          echo ${GOPATH}
          echo ${GOROOT}
          export PATH=$PATH:$GOPATH/bin
          echo $PATH
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init
          NEW_VERSION=testVer GIT_REV=testRev BUILD_TIME=testTime make generate-ios-bindings copy-ios-bindings
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: /Users/runner/work/wallet-sdk/go
      - name: Setup env for integration test
        run: |
          echo '127.0.0.1 file-server.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 did-resolver.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 vc-rest-echo.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 api-gateway.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 cognito-mock.trustbloc.local' | sudo tee -a /etc/hosts
          brew install docker docker-compose
          colima start
          export PATH=$PATH:$GOPATH/bin
          echo $PATH
          make prepare-integration-test-flutter
      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v2
        with:
          channel: stable
          version: 3.10.6
      - name: Install flutter app dependencies
        run: make install-flutter-dependencies
      - name: Run iOS Simulator
        uses: futureware-tech/simulator-action@v2
        with:
          model: 'iPhone 14'
      - name: Remove AppIcon contents file (Simulator build fails with this file)
        run: |
          rm -rf demo/app/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
          rm -rf demo/app/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json
      - name: Run tests on Simulator
        run: make integration-test-flutter integration-test-ios

  AndroidFlutterIntegrationTest:
    runs-on: macOS-12
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Gradle cache
        uses: gradle/gradle-build-action@v2.4.2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Generate and copy Android Binding
        run: |
          echo $PATH
          echo ${{ github.workspace }}
          echo ${GOPATH}
          echo ${GOROOT}
          export PATH=$PATH:$GOPATH/bin
          echo $PATH
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init
          NEW_VERSION=testVer GIT_REV=testRev BUILD_TIME=testTime make generate-android-bindings copy-android-bindings
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: /Users/runner/work/wallet-sdk/go
      - name: Setup env for integration test
        run: |
          echo '127.0.0.1 file-server.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 did-resolver.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 vc-rest-echo.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 api-gateway.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 cognito-mock.trustbloc.local' | sudo tee -a /etc/hosts
          brew install docker docker-compose
          colima start
          export PATH=$PATH:$GOPATH/bin
          echo $PATH
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init
          make prepare-integration-test-flutter
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v2
        with:
          channel: stable
          version: 3.10.6
      - name: Install flutter app dependencies
        run: make install-flutter-dependencies
      - name: Build APK in Debug mode
        run: |
          cd demo/app
          flutter build apk --debug
      - name: Run tests on Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 32
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: adb reverse tcp:8075 tcp:8075 && adb reverse tcp:8072 tcp:8072 && adb reverse tcp:9229 tcp:9229 && make integration-test-flutter integration-test-android
